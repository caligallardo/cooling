function adj_time_vec = adj_time(time_vec)
% given time vector with resets,
% returns time vector where resets pick up at 30 min after last reading
step_ahead = 30;

% check input is valid
[m, n] = size(time_vec);
assert(m > 1 && n ~= 0, 'Expected column vector');
if ~isa(time_vec, 'double')
    error('Expected double array');
end

num_resets = 0;
last_time = time_vec(1);
adj_time_vec = zeros(length(time_vec), 1);
adj_time_vec(1) = time_vec(1);

for i = 1:length(time_vec)
    if time_vec(i) < last_time
        % if reset, increment counter
        num_resets = num_resets + 1
    else if i
        if i~= 1
        % increment by difference
        adj_time_vec(i) = adj_time_vec(i)
    end
    % adjust
    time_vec(i)
    adj_time_vec(i) = last_time + step_ahead * num_resets
    last_time = time_vec(i)
end

end